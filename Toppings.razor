@page "/toppings"

@inject IConfiguration configuration
@inject ToppingService ToppingService
@inject IJSRuntime JSRuntime

@using TestBlazorAppGJackson.Classes

@* need to now allow duplicate toppings now GAVIN ALSO SAME FOR PIZZ AND NEED TO WORK ON TOPPINGS CHOICES*@


<style>
    /* General page layout */
    h1 {
        text-align: center;
        margin-top: 20px;
        font-size: 2rem;
    }

    .create-btn {
        display: block;
        margin: 20px auto;
        padding: 10px 20px;
        background-color: purple;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1.2rem;
    }

        .create-btn:hover {
            background-color: rebeccapurple;
        }

    /* Topping grid */
    .pizza-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); /* Flexible grid layout */
        gap: 20px;
        padding: 20px;
        margin-top: 20px;
    }

    .pizza-item {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

        .pizza-item h3 {
            margin: 10px 0;
            font-size: 1.5rem;
            color: #333;
        }

    .button-group {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 10px;
    }

    button {
        padding: 8px 15px;
        font-size: 1rem;
        border-radius: 5px;
        border: none;
        cursor: pointer;
    }

        button:hover {
            opacity: 0.8;
        }

    .delete-btn, .edit-btn {
        background-color: purple;
        color: white;
    }

        .delete-btn:hover, .edit-btn:hover {
            background-color: rebeccapurple;
        }

    /* Modal Styling */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        width: 300px;
        text-align: center;
    }

        .modal-content h3 {
            margin-bottom: 20px;
        }

        .modal-content label {
            display: block;
            margin-bottom: 5px;
        }

        .modal-content input {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

    .modal-buttons {
        display: flex;
        justify-content: space-between;
    }

        .modal-buttons button {
            width: 48%;
            background-color: purple;
            color: white;
        }

            .modal-buttons button:hover {
                opacity: 0.8;
                background-color: rebeccapurple;
            }
</style>

<PageTitle>Configure and View Toppings for Your Pizza!</PageTitle>

<h1>Configure and View Toppings for Your Pizza!</h1>

<!-- Button to add new topping -->
<button class="create-btn" @onclick="CreateTopping">Create New Topping</button>

@if (toppings == null || !toppings.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="pizza-grid">
        @foreach (var topping in toppings)
        {
            <div class="pizza-item">
                <h3>@topping.ToppingName</h3>
                <div class="button-group">
                    <button class="delete-btn" @onclick="() => DeleteTopping(topping.ToppingID)">Delete</button>
                    <button class="edit-btn" @onclick="() => EditTopping(topping)">Edit</button> <!-- Edit button -->
                </div>
            </div>
        }
    </div>
}

<!-- Add Topping Modal -->
@if (isAddToppingModalOpen)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Add New Topping</h3>
            <label for="toppingName">Topping Name</label>
            <input id="toppingName" type="text" @bind="newTopping.ToppingName" />

            <div class="modal-buttons">
                <button @onclick="SaveTopping">Save</button>
                <button @onclick="CloseAddToppingModal">Cancel</button>
            </div>
        </div>
    </div>
}

<!-- Edit Topping Modal -->
@if (isEditToppingModalOpen)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Edit Topping</h3>
            <label for="editToppingName">Topping Name</label>
            <input id="editToppingName" type="text" @bind="selectedTopping.ToppingName" />

            <div class="modal-buttons">
                <button @onclick="SaveEditedTopping">Save</button>
                <button @onclick="CloseEditToppingModal">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<Topping> toppings;
    private Topping newTopping = new Topping();
    private Topping selectedTopping; // Selected topping for editing
    private bool isAddToppingModalOpen = false; // Flag to open/close modal for adding topping
    private bool isEditToppingModalOpen = false; // Flag to open/close modal for editing topping

    protected override async Task OnInitializedAsync()
    {
        toppings = await ToppingService.GetToppingsAsync();
    }

    private void CreateTopping()
    {
        isAddToppingModalOpen = true; // Open the modal to add a new topping
    }

    private async Task SaveTopping()
    {
        if (newTopping != null && !string.IsNullOrWhiteSpace(newTopping.ToppingName))
        {
            //need to look into the current list to ensure no duplicates are being created!
            foreach (var topping in toppings)
            {
                if (string.Equals(topping.ToppingName, newTopping.ToppingName, StringComparison.OrdinalIgnoreCase))
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Topping already exists!");
                    // Show prompt for duplicate
                    return;
                }
            }


            var success = await ToppingService.AddToppingAsync(newTopping);
            if (success)
            {
                toppings = await ToppingService.GetToppingsAsync(); // Refresh the list
                CloseAddToppingModal(); // Close the modal after saving
            }
            else
            {
                Console.WriteLine("Error saving topping.");
            }
        }
    }

    private void CloseAddToppingModal()
    {
        isAddToppingModalOpen = false; // Close the modal
        newTopping = new Topping(); // Reset the new topping object
    }

    private async Task DeleteTopping(int toppingId)
    {
        var success = await ToppingService.DeleteToppingAsync(toppingId);
        if (success)
        {
            toppings = await ToppingService.GetToppingsAsync(); // Refresh the list after deleting
        }
        else
        {
            Console.WriteLine("Error deleting topping.");
        }
    }

    // Open the edit modal and set the selected topping
    private void EditTopping(Topping topping)
    {
        selectedTopping = topping; // Set the topping to be edited
        isEditToppingModalOpen = true; // Open the edit modal
    }

    // Save the edited topping
    private async Task SaveEditedTopping()
    {
        if (selectedTopping != null && !string.IsNullOrWhiteSpace(selectedTopping.ToppingName))
        {
            //need to look into the current list to ensure no duplicates are being created!
            foreach (var topping in toppings)
            {
                if (topping.ToppingID != selectedTopping.ToppingID &&
                string.Equals(topping.ToppingName, selectedTopping.ToppingName, StringComparison.OrdinalIgnoreCase))
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Topping already exists!");
                    toppings = await ToppingService.GetToppingsAsync(); // Refresh the list after checking
                    return;
                }
            }

            var success = await ToppingService.UpdateToppingAsync(selectedTopping);
            if (success)
            {
                toppings = await ToppingService.GetToppingsAsync(); // Refresh the list after editing
                CloseEditToppingModal(); // Close the modal after saving
            }
            else
            {
                Console.WriteLine("Error updating topping.");
            }
        }
    }

    // Close the edit modal without saving
    private void CloseEditToppingModal()
    {
        isEditToppingModalOpen = false; // Close the modal
        selectedTopping = null; // Reset the selected topping
    }
}
