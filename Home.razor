@page "/"
@using TestBlazorAppGJackson.Classes

@inject PizzaService PizzaService
@inject ToppingService ToppingService
@inject IJSRuntime JSRuntime


<style>
    /* General page layout */
    h1 {
        text-align: center;
        margin-top: 20px;
        font-size: 2rem;
    }

    .create-btn {
        display: block;
        margin: 20px auto;
        padding: 10px 20px;
        background-color: purple;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1.2rem;
    }

        .create-btn:hover {
            background-color: rebeccapurple;
        }

    /* Pizza grid */
    .pizza-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); /* Flexible grid layout */
        gap: 20px;
        padding: 20px;
        margin-top: 20px;
    }

    .pizza-item {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        text-align: center;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
    }

        .pizza-item h3 {
            margin: 10px 0;
            font-size: 1.5rem;
            color: #333;
        }

        .pizza-item p {
            font-size: 1rem;
            color: #666;
        }

    .button-group {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-top: 10px;
    }

    button {
        padding: 8px 15px;
        font-size: 1rem;
        border-radius: 5px;
        border: none;
        cursor: pointer;
    }

        button:hover {
            opacity: 0.8;
        }

    .delete-btn {
        background-color: purple;
        color: white;
    }

        .delete-btn:hover {
            background-color: rebeccapurple;
        }

    /* Modal Styling */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background-color: white;
        padding: 20px;
        border-radius: 8px;
        width: 300px;
        text-align: center;
    }

        .modal-content h3 {
            margin-bottom: 20px;
        }

        .modal-content label {
            display: block;
            margin-bottom: 5px;
        }

        .modal-content input, .modal-content select {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

    .modal-buttons {
        display: flex;
        justify-content: space-between;
        
    }

        .modal-buttons button {
            width: 48%;
            background-color: purple;
            color: white;
        }

            .modal-buttons button:hover {
                opacity: 0.8;
                background-color: rebeccapurple;
            }
</style>

<PageTitle>View and Edit your Pizza!</PageTitle>

<h1>View and Edit your Pizza!</h1>

<button class="create-btn" @onclick="OpenCreateModal">Create New Pizza</button>

@if (pizzas == null || !pizzas.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="pizza-grid">
        @foreach (var pizza in pizzas)
        {
            <div class="pizza-item">
                <h3>@pizza.PizzaName (@pizza.PizzaSize)</h3>
                <p><strong>Toppings:</strong> @pizza.Toppings</p>
                <div class="button-group">
                    <button class="delete-btn" @onclick="() => EditPizza(pizza)">Edit</button>
                    <button class="delete-btn" @onclick="() => DeletePizza(pizza.PizzaID)">Delete</button>
                </div>
            </div>
        }
    </div>
}

<!-- Create Pizza Modal -->
@if (isCreateModalOpen)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Create New Pizza</h3>
            <label for="newPizzaName">Pizza Name</label>
            <input id="newPizzaName" type="text" @bind="newPizza.PizzaName" />

            <label for="newPizzaSize">Pizza Size</label>
            <select id="newPizzaSize" @bind="newPizza.PizzaSize">
                <option value="">Select a Size</option>
                <option value="S">Small</option>
                <option value="M">Medium</option>
                <option value="L">Large</option>
            </select>

            <label for="numberOfToppings">Number of Toppings</label>
            <select id="numberOfToppings" @bind="numberOfToppings">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
            </select>

            <label for="Topping1">Topping 1</label>
            <select id="Topping1" @bind="Topping1">
                <option value="">Select a Topping</option>
                @foreach (var topping in toppingsList)
                {
                    <option value="@topping">@topping</option>
                }
            </select>

            @if (numberOfToppings >= 2)
            {
                <label for="Topping2">Topping 2</label>
                <select id="Topping2" @bind="Topping2">
                    <option value="">Select a Topping</option>
                    @foreach (var topping in toppingsList)
                    {
                        <option value="@topping">@topping</option>
                    }
                </select>
            }

            @if (numberOfToppings >= 3)
            {
                <label for="Topping3">Topping 3</label>
                <select id="Topping3" @bind="Topping3">
                    <option value="">Select a Topping</option>
                    @foreach (var topping in toppingsList)
                    {
                        <option value="@topping">@topping</option>
                    }
                </select>
            }

            <div class="modal-buttons">
                <button @onclick="SaveNewPizza">Save</button>
                <button @onclick="CloseCreateModal">Cancel</button>
            </div>
        </div>
    </div>
}

<!-- Edit Pizza Modal -->
@if (isEditModalOpen)
{
    <div class="modal-overlay">
        <div class="modal-content">
            <h3>Edit Pizza</h3>
            <label for="pizzaName">Pizza Name</label>
            <input id="pizzaName" type="text" @bind="selectedPizza.PizzaName" />

            <label for="pizzaSize">Pizza Size</label>
            <select id="pizzaSize" @bind="selectedPizza.PizzaSize">
                <option value="S">Small</option>
                <option value="M">Medium</option>
                <option value="L">Large</option>
            </select>

            <label for="numberOfToppings">Number of Toppings</label>
            <select id="numberOfToppings" @bind="numberOfToppings">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
            </select>

            <label for="Topping1">Topping 1</label>
            <select id="Topping1" @bind="EditTopping1">
                <option value="">Select a Topping</option>
                @foreach (var topping in toppingsList)
                {
                    <option value="@topping">@topping</option>
                }
            </select>

            @if (numberOfToppings >= 2)
            {
                <label for="Topping2">Topping 2</label>
                <select id="Topping2" @bind="EditTopping2">
                    <option value="">Select a Topping</option>
                    @foreach (var topping in toppingsList)
                    {
                        <option value="@topping">@topping</option>
                    }
                </select>
            }

            @if (numberOfToppings >= 3)
            {
                <label for="Topping3">Topping 3</label>
                <select id="Topping3" @bind="EditTopping3">
                    <option value="">Select a Topping</option>
                    @foreach (var topping in toppingsList)
                    {
                        <option value="@topping">@topping</option>
                    }
                </select>
            }

            <div class="modal-buttons">
                <button @onclick="SaveEditedPizza">Save</button>
                <button @onclick="CloseEditModal">Cancel</button>
            </div>
        </div>
    </div>
}

@code {
    private IEnumerable<Pizza> pizzas;
    private Pizza selectedPizza; // Selected pizza to edit
    private Pizza newPizza = new Pizza(); // New pizza for creation
    private bool isEditModalOpen = false; // Flag to open/close the edit modal
    private bool isCreateModalOpen = false; // Flag to open/close the create modal
    private List<string> toppingsList = new List<string>(); // List of toppings for dropdown
    private int numberOfToppings = 1; // Number of toppings selected by user

    // For creating a new pizza
    private string Topping1;
    private string Topping2;
    private string Topping3;

    // For editing a pizza
    private string EditTopping1;
    private string EditTopping2;
    private string EditTopping3;

    protected override async Task OnInitializedAsync()
    {
        pizzas = await PizzaService.GetPizzasAsync();
        var toppingsLists = await ToppingService.GetToppingsAsync(); // Get toppings from the service
        if (toppingsLists.Count() != 0 && toppingsLists != null)
        {
            foreach (var topping in toppingsLists)
            {
                toppingsList.Add(topping.ToppingName);
            }
        }
    }

    private void EditPizza(Pizza pizza)
    {
        selectedPizza = pizza; // Set the pizza to be edited
        isEditModalOpen = true; // Open the edit modal

        // Split the toppings string and populate the edit toppings list
        var toppings = selectedPizza.Toppings.Split(',').ToList();
        numberOfToppings = toppings.Count; // Set number of toppings based on the split


        if (numberOfToppings == 1)
        {
            EditTopping1 = toppings.Count > 0 ? toppings[0] : "";
            Topping1 = EditTopping1;
        }
        else if (numberOfToppings == 2)
        {
            EditTopping1 = toppings.Count > 0 ? toppings[0] : "";
            EditTopping2 = toppings.Count > 1 ? toppings[1] : "";

            Topping1 = EditTopping1;
            Topping2 = EditTopping2;
        }
        else if (numberOfToppings == 3)
        {
            EditTopping1 = toppings.Count > 0 ? toppings[0] : "";
            EditTopping2 = toppings.Count > 1 ? toppings[1] : "";
            EditTopping3 = toppings.Count > 2 ? toppings[2] : "";

            Topping1 = EditTopping1;
            Topping2 = EditTopping2;
            Topping3 = EditTopping3;
        }

    }

    private async Task SaveEditedPizza()
    {
        if (selectedPizza != null)
        {
            if (numberOfToppings == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "A pizza must be configured with atleast one topping.");
                return;
            }

            if (numberOfToppings == 1)
            {
                if (EditTopping1 == "")
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Ensure all pizza toppings are filled out.");
                    return;
                }
            }
            if (numberOfToppings == 2)
            {
                if (EditTopping2 == "")
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Ensure all pizza toppings are filled out.");
                    return;
                }
            }
            if (numberOfToppings == 3)
            {
                if (EditTopping3 == "")
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Ensure all pizza toppings are filled out.");
                    return;
                }
            }
            //validation to ensure all are filled in correctly 


            // Prepare the toppings string
            List<string> selectedToppings = new List<string>();
            if (numberOfToppings >= 1) selectedToppings.Add(EditTopping1);
            if (numberOfToppings >= 2) selectedToppings.Add(EditTopping2);
            if (numberOfToppings >= 3) selectedToppings.Add(EditTopping3);

            // Sort toppings and join them into a comma-separated string
            selectedToppings.Sort();
            selectedPizza.Toppings = string.Join(",", selectedToppings);

            var existingPizza = pizzas.FirstOrDefault(p =>
                string.Equals(p.PizzaName, selectedPizza.PizzaName, StringComparison.OrdinalIgnoreCase) &&
                p.PizzaSize == selectedPizza.PizzaSize &&
                p.Toppings == selectedPizza.Toppings &&
                p.PizzaID != selectedPizza.PizzaID); // Ensure we don't match the pizza we are editing

            if (existingPizza != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "A pizza with this name, size, and toppings already exists!");
                pizzas = await PizzaService.GetPizzasAsync();
                // Notify the user that the pizza already exists
                Console.WriteLine("A pizza with this name, size, and toppings already exists.");
                return;
            }

            // Update the pizza
            var success = await PizzaService.UpdatePizzaAsync(selectedPizza);
            if (success)
            {
                pizzas = await PizzaService.GetPizzasAsync();
                CloseEditModal();
            }
            else
            {
                Console.WriteLine("Error saving pizza.");
            }
        }
    }


    private void CloseEditModal()
    {
        isEditModalOpen = false; // Close the edit modal
    }

    private void OpenCreateModal()
    {
        isCreateModalOpen = true; // Open the create pizza modal
        newPizza.Toppings = ""; // Reset toppings string
        numberOfToppings = 1; // Reset the number of toppings
        Topping1 = "";
        Topping2 = "";
        Topping3 = "";
    }

    private void UpdateToppingCount(ChangeEventArgs e)
    {
        numberOfToppings = int.Parse(e.Value.ToString() ?? "1");
    }

    private async Task SaveNewPizza()
    {
        if (!string.IsNullOrEmpty(newPizza.PizzaName) && !string.IsNullOrEmpty(newPizza.PizzaSize))
        {
            if (numberOfToppings == 0)
            {
                await JSRuntime.InvokeVoidAsync("alert", "A pizza must be configured with atleast one topping.");
                return;
            }

            if (numberOfToppings == 1)
            {
                if (Topping1 == "")
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Ensure all pizza toppings are filled out.");
                    return;
                }
            }
            if(numberOfToppings == 2)
            {
                if (Topping2 == "")
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Ensure all pizza toppings are filled out.");
                    return;
                }
            }
            if (numberOfToppings == 3)
            {
                if (Topping3 == "")
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Ensure all pizza toppings are filled out.");
                    return;
                }
            }
            //validation above

            // Prepare the toppings string
            List<string> selectedToppings = new List<string>();
            if (numberOfToppings >= 1) selectedToppings.Add(Topping1);
            if (numberOfToppings >= 2) selectedToppings.Add(Topping2);
            if (numberOfToppings >= 3) selectedToppings.Add(Topping3);

            // Sort toppings and join them into a comma-separated string
            selectedToppings.Sort();
            newPizza.Toppings = string.Join(",", selectedToppings);

            // Check if a pizza with the same name, size, and toppings already exists
            var existingPizza = pizzas.FirstOrDefault(p =>
               string.Equals(p.PizzaName, newPizza.PizzaName, StringComparison.OrdinalIgnoreCase) &&
               p.PizzaSize == newPizza.PizzaSize &&
               p.Toppings == newPizza.Toppings);

            if (existingPizza != null)
            {
                await JSRuntime.InvokeVoidAsync("alert", "A pizza with this name, size, and toppings already exists!");
                // Notify the user that the pizza already exists
                Console.WriteLine("A pizza with this name, size, and toppings already exists.");
                return;
            }

            // Create the new pizza
            var success = await PizzaService.CreatePizzaAsync(newPizza);
            if (success)
            {
                pizzas = await PizzaService.GetPizzasAsync();
                CloseCreateModal();
            }
            else
            {
                Console.WriteLine("Error creating pizza.");
            }
        }
        else
        {
            Console.WriteLine("Pizza name and size are required.");
        }
    }


    private void CloseCreateModal()
    {
        isCreateModalOpen = false; // Close the create pizza modal
        newPizza = new Pizza(); // Reset the new pizza object
    }

    private async Task DeletePizza(int pizzaId)
    {
        var success = await PizzaService.DeletePizzaAsync(pizzaId);
        if (success)
        {
            pizzas = await PizzaService.GetPizzasAsync();
        }
        else
        {
            Console.WriteLine("Error deleting pizza.");
        }
    }
}


