@page "/login"
@using System.ComponentModel.DataAnnotations
@using TestBlazorAppGJackson.Services
@using TestBlazorAppGJackson.Services.TestBlazorAppGJackson.Services
@inject NavMenuVisibilityService _navMenuVisibilityService  
@inject UserService _userService


<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
        <ValidationMessage For="@(() => loginModel.Username)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Login</button>
    </div>
</EditForm>

@if (loginFailed)
{
    <p class="error-message">Invalid username or password.</p>
}

@code {
    private LoginModel loginModel = new LoginModel();
    private bool loginFailed = false;

    private void HandleValidSubmit()
    {
        // Grab the user information from the UserService
        var user = _userService.GetUser();

        // Compare the entered credentials with the ones in appsettings
        if (loginModel.Username == user.Username && loginModel.Password == user.Password)
        {
            loginFailed = false;
            _navMenuVisibilityService.SetNavMenuVisibility(true);  // Show nav bar after successful login
            Console.WriteLine("Login successful!");
            // Logic for successful login (e.g., redirect to dashboard)
        }
        else
        {
            loginFailed = true;
            _navMenuVisibilityService.SetNavMenuVisibility(false);  // Hide nav bar after failed login
            Console.WriteLine("Login failed.");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(5, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; }
    }
}

<style>
    /* Centering the login box in the middle of the screen */
    .login-container {
        width: 300px;
        padding: 20px;
        margin: 0 auto;
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        margin-top: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn-primary {
        width: 100%;
        padding: 10px;
        background-color: #007bff;
        border: none;
        color: white;
        border-radius: 4px;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .error-message {
        color: red;
        font-size: 14px;
        margin-top: 10px;
        text-align: center;
    }
</style>
